version: 2.1
orbs:
  node: circleci/node@6.1.0

# Define common environment variables
env-vars: &env-vars
  TEST_DB_HOST: localhost
  TEST_DB_NAME: test_db
  TEST_DB_USER: test_user
  TEST_DB_PASSWORD: test_password
  TEST_DB_PORT: 5432

jobs:
  test-backend:
    docker:
      - image: cimg/node:lts
      - image: cimg/postgres:14.1
        environment:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-v1-{{ checksum "server/package-lock.json" }}
      - node/install-packages:
          pkg-manager: npm
          app-dir: server
          cache-path: server/node_modules
          override-ci-command: npm ci
      - save_cache:
          key: backend-deps-v1-{{ checksum "server/package-lock.json" }}
          paths:
            - server/node_modules
      - run:
          name: Run Backend Tests
          command: |
            cd server
            npm run test
          environment:
            <<: *env-vars

  test-frontend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-v1-{{ checksum "client/package-lock.json" }}
      - node/install-packages:
          pkg-manager: npm
          app-dir: client
          cache-path: client/node_modules
          override-ci-command: npm ci
      - save_cache:
          key: frontend-deps-v1-{{ checksum "client/package-lock.json" }}
          paths:
            - client/node_modules
      - run:
          name: Run Frontend Tests
          command: |
            cd client
            npm run test

  build:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys:
            - deps-v1-{{ checksum "package-lock.json" }}-{{ checksum "client/package-lock.json" }}-{{ checksum "server/package-lock.json" }}
      - node/install-packages:
          pkg-manager: npm
          override-ci-command: npm ci && npm run install-all
      - save_cache:
          key: deps-v1-{{ checksum "package-lock.json" }}-{{ checksum "client/package-lock.json" }}-{{ checksum "server/package-lock.json" }}
          paths:
            - node_modules
            - client/node_modules
            - server/node_modules
      - run:
          name: Build Client & Server
          command: |
            npm run build --prefix client &
            npm run build --prefix server &
            wait
      - run:
          name: Compile Migrations
          command: |
            cd server
            npx tsc migrations/*.ts --outDir dist/migrations
      - persist_to_workspace:
          root: .
          paths:
            - client/build
            - server/dist
            - server/package.json
            - server/package-lock.json

  deploy:
    machine: 
      image: ubuntu-2204:current
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - add_ssh_keys:
          fingerprints:
            - "SHA256:6+qHFQDbqCYFzFzHfY7fpBaly2rEB83DUxswOGj6dkI"
      - run:
          name: Deploy to Server and Run Migrations
          command: |
            # Copy all files in parallel
            (scp -r /home/circleci/project/client/build/* $SERVER_USER@$SERVER_IP:$SERVER_DIR/client) &
            (scp -r /home/circleci/project/server/dist/* /home/circleci/project/server/package*.json $SERVER_USER@$SERVER_IP:$SERVER_DIR/server) &
            wait
            
            # Run migrations and restart services
            ssh $SERVER_USER@$SERVER_IP "cd $SERVER_DIR/server && \
              npm ci --production && \
              NODE_ENV=production npm run migrate || echo 'No migrations to run' && \
              pm2 restart $SERVER_DIR/server/ecosystem.config.js && \
              sudo systemctl restart nginx"

workflows:
  test-build-and-deploy:
    jobs:
      - test-backend:
          filters:
            branches:
              only: master
      - test-frontend:
          filters:
            branches:
              only: master
      - build:
          requires:
            - test-backend
            - test-frontend
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master